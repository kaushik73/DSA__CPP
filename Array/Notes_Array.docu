// Size limit of array declared in int main() is of range 10^5. 

// Size limit of array declared before int main() i.e. declared globally is of range 10^7. but for this you need to pass constant variable or constant value in array size .
// eg. const int n = 2e7;
// int a[n];
// here const keyword is used because it specifies that in this program the value of n cannot be updated.


// 1e7 = 10^7.



// vector<vector<int>> intervals = {{6, 8}, {1, 9}, {2, 4}, {4, 7}};
// for (int i = 0; i < intervals.size(); i++)
//     {
//         for (int j = 0; j < intervals[i].size(); j++)
//         {
//             cout << intervals[i][j] << " ";
//         }
//         cout << endl;
//     }


//  int *arr = new int[n];  // ALLOCATING DYANAMIC SIZE TO ARRAY
//  int arr[n] -> in this syntax, array memory is array using Stack ab agar stack leke kam memory aaya aur tumne n jyda le liya too error 


//  cout << typeid(variable).name() << endl;

// new keyword is used when you want to use heap memory

// stack memory allocation -> when you use stack memory for a variable
// dynamic memory allocation -> when you use heap memory for a variable

// for eg-> we want ch in heap memory then 'new ch' will return a address aur 
// ye address hum kisi pointer m store kar sakte hai 


// dynamic allocation m memory apne aap release nahi hoti (like static m uske s
// scope k baad ho jati hai ) too hume delete keyword ka use karna padta hai.

// stack chota hota hai aur compile time k liye ho hota hai aur static allocation
// k kaam aaata hau

// for integer deletion delete i;
// for array deletion delete []arr;
// 85 and 71 are parenthesis problems.
